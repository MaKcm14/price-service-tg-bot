package tgbot

import (
	"bytes"

	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/entities"
	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/entities/dto"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// bestPriceMode is the action on the pressing the best-price button.
func (t *TgBot) bestPriceMode(update *tgbotapi.Update) {
	t.userLastAction[update.CallbackQuery.From.ID] = bestPriceModeData
	t.userRequest[update.CallbackQuery.From.ID] = dto.NewProductRequest(entities.BestPriceMode)

	var priceRangeInstructs = []string{
		"*–¢—ã –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ Best Price üìä *\n\n",
		"‚ùì*–ö–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n",
		"- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Ö –º–∞—Ä–∫–µ—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å\n\n",
		"- –ó–∞—Ç–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏\n\n",
		"*P.S. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞*\n\n",
		"*–î–∞–≤–∞–π –ø–æ–∏—â–µ–º!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range priceRangeInstructs {
		buffer.WriteString(instruct)
	}

	var keyboardMode = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ç—ã üõí", marketSetterMode)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, buffer.String())

	message.ParseMode = markDown
	message.ReplyMarkup = keyboardMode

	t.bot.Send(message)
}

// marketSetterMode sets the markets.
func (t *TgBot) marketSetterMode(update *tgbotapi.Update) {
	t.userLastAction[update.CallbackQuery.From.ID] = marketSetterMode

	var keyboardMarketSetter = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Megamarket üõçÔ∏è", wildberries)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Wildberries üå∏", megamarket)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–¥–∞—Ç—å —Ç–æ–≤–∞—Ä üì¶", productSetter)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, "*–í—ã–±–µ—Ä–∏ –º–∞—Ä–∫–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫* üëá")

	message.ParseMode = markDown
	message.ReplyMarkup = keyboardMarketSetter

	t.bot.Send(message)
}

// productSetter defines the logic of setting the product's name.
func (t *TgBot) productSetter(update *tgbotapi.Update) {
	t.userLastAction[update.CallbackQuery.From.ID] = productSetter

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID,
		"*–í–≤–µ–¥–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫* üì¶")

	message.ParseMode = markDown
	t.bot.Send(message)
}

// startSearch defines the logic of searching the products using the finished request.
func (t *TgBot) startSearch(update *tgbotapi.Update) {
	t.userLastAction[update.CallbackQuery.From.ID] = startSearch
}
