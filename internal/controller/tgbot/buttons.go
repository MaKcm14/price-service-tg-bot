package tgbot

import (
	"bytes"
	"context"
	"errors"
	"fmt"

	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/entities"
	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/entities/dto"
	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/repository/api"

	epkg "github.com/MaKcm14/price-service/pkg/entities"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// bestPriceMode is the action on the pressing the best-price button.
func (t *TgBot) bestPriceMode(update *tgbotapi.Update) {
	t.userLastAction[update.CallbackQuery.From.ID] = bestPriceModeData
	t.userRequest[update.CallbackQuery.From.ID] = dto.NewProductRequest(entities.BestPriceMode)

	var priceRangeInstructs = []string{
		"*–¢—ã –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ Best Price üìä *\n\n",
		"‚ùì*–ö–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n",
		"- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Ö –º–∞—Ä–∫–µ—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å\n\n",
		"- –ó–∞—Ç–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏\n\n",
		"*P.S. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞*\n\n",
		"*–î–∞–≤–∞–π –ø–æ–∏—â–µ–º!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range priceRangeInstructs {
		buffer.WriteString(instruct)
	}

	var keyboardMode = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ç—ã üõí", marketSetterMode)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, buffer.String())

	message.ParseMode = markDown
	message.ReplyMarkup = keyboardMode

	t.bot.Send(message)
}

// marketSetterMode sets the markets.
func (t *TgBot) marketSetterMode(update *tgbotapi.Update) {
	t.userLastAction[update.CallbackQuery.From.ID] = marketSetterMode

	var keyboardMarketSetter = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Megamarket üõçÔ∏è", megamarket)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Wildberries üå∏", wildberries)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–¥–∞—Ç—å —Ç–æ–≤–∞—Ä üì¶", productSetter)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, "*–í—ã–±–µ—Ä–∏ –º–∞—Ä–∫–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫* üëá")

	message.ParseMode = markDown
	message.ReplyMarkup = keyboardMarketSetter

	t.bot.Send(message)
}

// productSetter defines the logic of setting the product's name.
func (t *TgBot) productSetter(update *tgbotapi.Update) {
	t.userLastAction[update.CallbackQuery.From.ID] = productSetter

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID,
		"*–í–≤–µ–¥–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫* üì¶")

	message.ParseMode = markDown
	t.bot.Send(message)
}

// startSearch defines the logic of searching the products using the finished request.
func (t *TgBot) startSearch(update *tgbotapi.Update) {
	t.userLastAction[update.CallbackQuery.From.ID] = startSearch

	products, err := t.api.GetProductsByBestPrice(t.userRequest[update.CallbackQuery.From.ID])

	if err != nil {
		var errText = "*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*"

		if errors.Is(err, api.ErrApiInteraction) {
			errText += "\n\n*–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø–∞—Ä—Å–µ—Ä–æ–º... \n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫–ª—é—á–∏—Ç—å VPN –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ ‚è≥*"
		}

		var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, errText)
		message.ParseMode = markDown

		t.bot.Send(message)

		t.menu(update.CallbackQuery.From.ID)
		return
	}

	t.userSample[update.CallbackQuery.From.ID] = products

	markets := make(map[string]int)

	for _, market := range t.userRequest[update.CallbackQuery.From.ID].Markets {
		markets[market] = 0
	}

	t.userSamplePtr[update.CallbackQuery.From.ID] = markets

	var iterInstrs = []string{
		"*–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!* üòä\n\n",
		"‚ùì*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫?*\n",
		"‚úî –ù–∞–∂–∏–º–∞–π –Ω–∞ —Ç–æ—Ç –º–∞—Ä–∫–µ—Ç, —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n",
		"‚úî –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n",
		"*–î–∞–≤–∞–π –∏—Å–∫–∞—Ç—å!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range iterInstrs {
		buffer.WriteString(instruct)
	}

	var keyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶", productsIter)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, buffer.String())

	message.ParseMode = markDown
	message.ReplyMarkup = keyboard

	t.bot.Send(message)
}

// productsIter defines the logic of iterating the user's products sample.
func (t *TgBot) productsIter(update *tgbotapi.Update, market string) {
	t.userLastMarketChoice[update.CallbackQuery.From.ID] = market

	if t.userLastAction[update.CallbackQuery.From.ID] != productsIter {
		var choiceText = "*–í—ã–±–µ—Ä–∏, –æ—Ç–∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä* üëá"
		var keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Megamarket üõçÔ∏è", megamarket)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Wildberries üå∏", wildberries)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)
		var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, choiceText)

		message.ParseMode = markDown
		message.ReplyMarkup = keyboard

		t.bot.Send(message)

		t.userLastAction[update.CallbackQuery.From.ID] = productsIter
		return
	}

	count := t.userSamplePtr[update.CallbackQuery.From.ID][market]

	if sample := t.userSample[update.CallbackQuery.From.ID][market]; len(sample.Products) <= count {
		return
	}

	sample := t.userSample[update.CallbackQuery.From.ID][market]

	t.userSamplePtr[update.CallbackQuery.From.ID][market] = count + 1

	var productDesc = []string{
		fmt.Sprintf("*‚úîÔ∏è %s* üì¶\n\n", sample.Products[count].Name),
		fmt.Sprintf("*‚öôÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:*  %s\n\n", sample.Products[count].Brand),
		fmt.Sprintf("*üè∑Ô∏è –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏:*  %d %s\n\n", sample.Products[count].Price.BasePrice, sample.Currency),
		fmt.Sprintf("*üè∑Ô∏è –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π:*  %d %s\n\n", sample.Products[count].Price.DiscountPrice, sample.Currency),
		fmt.Sprintf("*üîñ –°–∫–∏–¥–∫–∞:*  %d%%\n\n", sample.Products[count].Price.Discount),
		fmt.Sprintf("*üîó –ü–æ—Å—Ç–∞–≤—â–∏–∫:* %s\n\n", sample.Products[count].Supplier),
		fmt.Sprintf("*üõí –ú–∞—Ä–∫–µ—Ç:* %s\n\n", sample.Market),
		fmt.Sprintf("*üì¶ –¢–æ–≤–∞—Ä:*\n%s\n\n", sample.Products[count].Links.URL),
		fmt.Sprintf("*–í—ã–±–æ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:*\n%s\n\n", sample.SampleLink),
	}

	buffer := bytes.Buffer{}

	for _, desc := range productDesc {
		buffer.WriteString(desc)
	}

	var keyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Megamarket üõçÔ∏è", megamarket)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Wildberries üå∏", wildberries)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠ê", addToFavorite)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, buffer.String())

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	t.bot.Send(message)
}

// addFavoriteProduct adds the product to the favorites.
func (t *TgBot) addFavoriteProduct(update *tgbotapi.Update) {
	const op = "tgbot.add-favorite-product"

	var response = "*–¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚≠ê*"

	market := t.userLastMarketChoice[update.CallbackQuery.From.ID]
	count := t.userSamplePtr[update.CallbackQuery.From.ID][market] - 1
	sample := t.userSample[update.CallbackQuery.From.ID][market]

	product := sample.Products[count]

	err := t.repo.AddFavoriteProducts(context.Background(), update.CallbackQuery.From.ID, []epkg.Product{product})

	if err != nil {
		t.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))
		response = "*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*"
	}

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, response)

	message.ParseMode = markDown

	t.bot.Send(message)
}

// favoriteMode defines the entry-point to the favorite mode.
func (t *TgBot) favoriteMode(update *tgbotapi.Update) {
	t.userLastAction[update.CallbackQuery.From.ID] = favoriteModeData

	var favoriteModeInstruct = []string{
		"*–¢—ã –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ò–∑–±—Ä–∞–Ω–Ω–æ–µ* ‚≠ê\n\n",
		"- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∫–æ–≥–¥–∞-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å ‚ù§Ô∏è\n\n",
		"‚ùì*–ö–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n\n",
		"- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É *–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä ‚û°Ô∏è*, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É\n\n",
		"- –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –≤—ã–±–æ—Ä–∫–∏, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä* üóëÔ∏è\n\n",
		"- –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏ *–ú–µ–Ω—é* üìã\n\n",
		"*–ö —Ç–æ–≤–∞—Ä–∞–º!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range favoriteModeInstruct {
		buffer.WriteString(instruct)
	}

	var keyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶", showFavoriteProducts)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, buffer.String())

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	t.bot.Send(message)
}

// showFavoriteProducts shows the user's favorite products.
func (t *TgBot) showFavoriteProducts(update *tgbotapi.Update) {
	const op = "tgbot.show-favorite-products"

	var product epkg.Product

	products, err := t.repo.GetFavoriteProducts(context.Background(), update.CallbackQuery.From.ID)

	if err != nil {
		t.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))

		response := "*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, response)

		message.ReplyMarkup = keyboard
		message.ParseMode = markDown

		t.bot.Send(message)
		return
	} else if len(t.userFavoriteLastProds) == len(products) {
		response := "*–¢–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç üì¶*"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, response)

		message.ReplyMarkup = keyboard
		message.ParseMode = markDown

		t.bot.Send(message)
		return
	}

	for key, val := range products {
		if _, flagExist := t.userFavoriteLastProds[key]; !flagExist {
			product = val
			t.lastFavoriteProd = key
			t.userFavoriteLastProds[key] = struct{}{}
			break
		}
	}

	var productDesc = []string{
		fmt.Sprintf("*‚úîÔ∏è %s* üì¶\n\n", product.Name),
		fmt.Sprintf("*‚öôÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:*  %s\n\n", product.Brand),
		fmt.Sprintf("*üè∑Ô∏è –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏:*  %d\n\n", product.Price.BasePrice),
		fmt.Sprintf("*üîó –ü–æ—Å—Ç–∞–≤—â–∏–∫:* %s\n\n", product.Supplier),
		fmt.Sprintf("*üì¶ –¢–æ–≤–∞—Ä:*\n%s\n\n", product.Links.URL),
	}

	buffer := bytes.Buffer{}

	for _, desc := range productDesc {
		buffer.WriteString(desc)
	}

	var keyboard = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä ‚û°Ô∏è", showFavoriteProducts)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üóëÔ∏è", deleteFavoriteProduct)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, buffer.String())

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	t.bot.Send(message)
}

// deleteFavoriteProduct defines the logic of the deleting the user's favorite product.
func (t *TgBot) deleteFavoriteProduct(update *tgbotapi.Update) {
	const op = "tgbot.delete-favorite-product"

	var response = "*–¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω üóëÔ∏è*"

	err := t.repo.DeleteFavoriteProducts(context.Background(), update.CallbackQuery.From.ID, []int{t.lastFavoriteProd})

	if err != nil {
		t.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))
		response = "*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*"
	} else {
		delete(t.userFavoriteLastProds, t.lastFavoriteProd)
	}

	var message = tgbotapi.NewMessage(update.CallbackQuery.From.ID, response)

	var keyboard = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä ‚û°Ô∏è", showFavoriteProducts)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	t.bot.Send(message)
}
