package tgbot

import (
	"bytes"
	"errors"
	"fmt"
	"log/slog"

	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/entities"
	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/entities/dto"
	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/repository/api"
	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/services"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type bestPriceMode struct {
	botConf *tgBotConfigs
	logger  *slog.Logger
	api     services.ApiInteractor
}

func newBestPriceMode(log *slog.Logger, bot *tgBotConfigs, api services.ApiInteractor) bestPriceMode {
	return bestPriceMode{
		botConf: bot,
		logger:  log,
		api:     api,
	}
}

// bestPriceMode is the action on the pressing the best-price button.
func (b *bestPriceMode) bestPriceMode(chatID int64) {
	if _, flagExist := b.botConf.users[chatID]; !flagExist {
		b.botConf.users[chatID] = *newUserConfig()
	}

	var newConfig userConfig = b.botConf.users[chatID]

	newConfig.lastAction = bestPriceModeData
	newConfig.request = dto.NewProductRequest(entities.BestPriceMode)

	b.botConf.users[chatID] = newConfig

	var priceRangeInstructs = []string{
		"*–¢—ã –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ Best Price üìä *\n\n",
		"‚ùì*–ö–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n",
		"- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Ö –º–∞—Ä–∫–µ—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å\n\n",
		"- –ó–∞—Ç–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏\n\n",
		"*P.S. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞*\n\n",
		"*–î–∞–≤–∞–π –ø–æ–∏—â–µ–º!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range priceRangeInstructs {
		buffer.WriteString(instruct)
	}

	var keyboardMode = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ç—ã üõí", marketSetterMode)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(chatID, buffer.String())

	message.ParseMode = markDown
	message.ReplyMarkup = keyboardMode

	b.botConf.bot.Send(message)
}

// marketSetterMode sets the markets.
func (b *bestPriceMode) marketSetterMode(chatID int64) {
	var newConfig userConfig = b.botConf.users[chatID]

	newConfig.lastAction = marketSetterMode

	b.botConf.users[chatID] = newConfig

	var keyboardMarketSetter = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Megamarket üõçÔ∏è", megamarket)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Wildberries üå∏", wildberries)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–¥–∞—Ç—å —Ç–æ–≤–∞—Ä üì¶", productSetter)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(chatID, "*–í—ã–±–µ—Ä–∏ –º–∞—Ä–∫–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫* üëá")

	message.ParseMode = markDown
	message.ReplyMarkup = keyboardMarketSetter

	b.botConf.bot.Send(message)
}

// productSetter defines the logic of setting the product's name.
func (b *bestPriceMode) productSetter(chatID int64) {
	var newConfig userConfig = b.botConf.users[chatID]

	newConfig.lastAction = productSetter

	b.botConf.users[chatID] = newConfig

	var message = tgbotapi.NewMessage(chatID,
		"*–í–≤–µ–¥–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫* üì¶")

	message.ParseMode = markDown
	b.botConf.bot.Send(message)
}

// startSearch defines the logic of searching the products using the finished request.
func (b *bestPriceMode) startSearch(chatID int64) {
	var newConfig userConfig = b.botConf.users[chatID]

	newConfig.lastAction = startSearch

	b.botConf.users[chatID] = newConfig

	products, err := b.api.GetProductsByBestPrice(b.botConf.users[chatID].request)

	if err != nil {
		var errText = "*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*"

		if errors.Is(err, api.ErrApiInteraction) {
			errText += "\n\n*–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø–∞—Ä—Å–µ—Ä–æ–º... \n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫–ª—é—á–∏—Ç—å VPN –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ ‚è≥*"
		}

		var message = tgbotapi.NewMessage(chatID, errText)
		var keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		message.ReplyMarkup = keyboard
		message.ParseMode = markDown

		b.botConf.bot.Send(message)

		return
	}

	newConfig = b.botConf.users[chatID]

	newConfig.sample.sample = products

	b.botConf.users[chatID] = newConfig

	markets := make(map[string]int)

	for _, market := range b.botConf.users[chatID].request.Markets {
		markets[market] = 0
	}

	newConfig = b.botConf.users[chatID]

	newConfig.sample.samplePtr = markets

	b.botConf.users[chatID] = newConfig

	var iterInstrs = []string{
		"*–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!* üòä\n\n",
		"‚ùì*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫?*\n",
		"‚úî –ù–∞–∂–∏–º–∞–π –Ω–∞ —Ç–æ—Ç –º–∞—Ä–∫–µ—Ç, —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n",
		"‚úî –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n",
		"*–î–∞–≤–∞–π –∏—Å–∫–∞—Ç—å!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range iterInstrs {
		buffer.WriteString(instruct)
	}

	var keyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶", productsIter)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(chatID, buffer.String())

	message.ParseMode = markDown
	message.ReplyMarkup = keyboard

	b.botConf.bot.Send(message)
}

// productsIter defines the logic of iterating the user's products sample.
func (b *bestPriceMode) productsIter(chatID int64, market string) {
	var newConfig userConfig = b.botConf.users[chatID]

	newConfig.sample.lastMarketChoice = market

	b.botConf.users[chatID] = newConfig

	if b.botConf.users[chatID].lastAction != productsIter {
		var choiceText = "*–í—ã–±–µ—Ä–∏, –æ—Ç–∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä* üëá"
		var keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Megamarket üõçÔ∏è", megamarket)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Wildberries üå∏", wildberries)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)
		var message = tgbotapi.NewMessage(chatID, choiceText)

		message.ParseMode = markDown
		message.ReplyMarkup = keyboard

		b.botConf.bot.Send(message)

		newConfig = b.botConf.users[chatID]

		newConfig.lastAction = productsIter

		b.botConf.users[chatID] = newConfig

		return
	}

	count := b.botConf.users[chatID].sample.samplePtr[market]

	if sample := b.botConf.users[chatID].sample.sample[market]; len(sample.Products) <= count {
		return
	}

	sample := b.botConf.users[chatID].sample.sample[market]

	newConfig = b.botConf.users[chatID]

	newConfig.sample.samplePtr[market] = count + 1

	b.botConf.users[chatID] = newConfig

	var productDesc = []string{
		fmt.Sprintf("*‚úîÔ∏è %s* üì¶\n\n", sample.Products[count].Name),
		fmt.Sprintf("*‚öôÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:*  %s\n\n", sample.Products[count].Brand),
		fmt.Sprintf("*üè∑Ô∏è –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏:*  %d %s\n\n", sample.Products[count].Price.BasePrice, sample.Currency),
		fmt.Sprintf("*üè∑Ô∏è –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π:*  %d %s\n\n", sample.Products[count].Price.DiscountPrice, sample.Currency),
		fmt.Sprintf("*üîñ –°–∫–∏–¥–∫–∞:*  %d%%\n\n", sample.Products[count].Price.Discount),
		fmt.Sprintf("*üîó –ü–æ—Å—Ç–∞–≤—â–∏–∫:* %s\n\n", sample.Products[count].Supplier),
		fmt.Sprintf("*üõí –ú–∞—Ä–∫–µ—Ç:* %s\n\n", sample.Market),
		fmt.Sprintf("*üì¶ –¢–æ–≤–∞—Ä:*\n%s\n\n", sample.Products[count].Links.URL),
		fmt.Sprintf("*–í—ã–±–æ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:*\n%s\n\n", sample.SampleLink),
	}

	buffer := bytes.Buffer{}

	for _, desc := range productDesc {
		buffer.WriteString(desc)
	}

	var keyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Megamarket üõçÔ∏è", megamarket)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Wildberries üå∏", wildberries)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠ê", addToFavorite)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(chatID, buffer.String())

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	b.botConf.bot.Send(message)
}

// showRequest shows the finished request that will use to get the products.
func (b *bestPriceMode) showRequest(chatID int64) {
	var newConfig userConfig = b.botConf.users[chatID]

	newConfig.lastAction = showRequest

	b.botConf.users[chatID] = newConfig

	var request = "‚úî*–ó–∞–ø—Ä–æ—Å –≥–æ—Ç–æ–≤! üìù*\n\n*‚úî–ú–∞—Ä–∫–µ—Ç—ã –ø–æ–∏—Å–∫–∞ üõí*\n"

	for _, market := range b.botConf.users[chatID].request.Markets {
		request += fmt.Sprintf("‚Ä¢ %s\n", market)
	}

	request += fmt.Sprintf("\n*–¢–æ–≤–∞—Ä: %s* üì¶\n\n", b.botConf.users[chatID].request.Query)

	request += "*–ï—Å–ª–∏ —Ç—ã –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –æ—à–∏–±—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ - —Å–æ–±–µ—Ä–∏ –∑–∞–Ω–æ–≤–æ!* üëá"

	var keyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ üîé", startSearch)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–°–æ–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ", bestPriceModeData)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	var message = tgbotapi.NewMessage(chatID, request)

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	b.botConf.bot.Send(message)
}

// addMarket adds the market to the request for the current ChatID.
func (b *bestPriceMode) addMarket(update *tgbotapi.Update) {
	var chatID = update.CallbackQuery.From.ID

	request := b.botConf.users[chatID].request

	request.Markets[update.CallbackQuery.Data] = update.CallbackQuery.Data

	newConfig := b.botConf.users[chatID]

	newConfig.request = dto.ProductRequest{
		Mode:    request.Mode,
		Markets: request.Markets,
	}

	b.botConf.users[chatID] = newConfig
}

// setQuery sets the product query request for the current ChatID.
func (b *bestPriceMode) setQuery(update *tgbotapi.Update) {
	var chatID = update.Message.Chat.ID

	request := b.botConf.users[chatID].request

	request.Query = update.Message.Text

	newConfig := b.botConf.users[chatID]

	newConfig.request = request

	b.botConf.users[chatID] = newConfig
}
