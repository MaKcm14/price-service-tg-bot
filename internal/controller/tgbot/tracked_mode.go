package tgbot

import (
	"bytes"
	"context"
	"fmt"
	"log/slog"
	"time"

	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/entities/dto"
	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/services"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// trackedMode defines the logic of the tracked mode user's interaction.
type trackedMode struct {
	botConf *tgBotConfigs
	logger  *slog.Logger
	repo    services.Repository
	api     services.ApiInteractor
}

func newTrackedMode(botConf *tgBotConfigs, repo services.Repository, logger *slog.Logger, api services.ApiInteractor) trackedMode {
	return trackedMode{
		botConf: botConf,
		logger:  logger,
		repo:    repo,
		api:     api,
	}
}

// trackedModeMenu defines the logic of user's tracked-prods menu.
func (t trackedMode) trackedModeMenu(chatID int64) {
	if _, flagExist := t.botConf.users[chatID]; !flagExist {
		t.botConf.users[chatID] = newUserConfig()
	}

	t.botConf.users[chatID].lastAction = trackedModeData
	t.botConf.users[chatID].request = dto.NewProductRequest()

	menu := []string{
		"*–¢—ã –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã* üîî\n\n",
		"- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–≤–∞—Ä\n\n",
		"‚ùì*–ö–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n\n",
		"- –ü–æ—Ä–æ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –Ω–æ –Ω–∞ —ç—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏... üôÅ\n\n",
		"ü¶Ü –°–∫—Ä—É–¥–∂ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–≤–∞—Ä, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–µ–±–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!\n\n",
		"‚ùì*–ö–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n\n",
		"- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É *–¢–æ–≤–∞—Ä üîî*, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–∞ –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n",
		"- –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–Ω—è—Ç—å —É–≤–µ–¥–æ–ª–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä* üóëÔ∏è\n\n",
		"- –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä üõí*\n\n",
		"- –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏ *–ú–µ–Ω—é* üìã\n\n",
		"*–ö —Ç–æ–≤–∞—Ä—É!* üëá",
	}

	keyboardMenu := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–¢–æ–≤–∞—Ä üîî", getTrackedProdMode)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä üõí", addTrackedProductData)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üóëÔ∏è", deleteTrackedProductData)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	buffer := bytes.Buffer{}

	for _, opt := range menu {
		buffer.WriteString(opt)
	}

	message := tgbotapi.NewMessage(chatID, buffer.String())

	message.ParseMode = markDown
	message.ReplyMarkup = keyboardMenu

	t.botConf.bot.Send(message)
}

// mode defines the logic of start the setting the tracked products.
func (t trackedMode) mode(chatID int64) {
	const op = "tgbot.add-tracked-product"

	if _, flagExist := t.botConf.users[chatID]; !flagExist {
		t.botConf.users[chatID] = newUserConfig()
	}

	t.botConf.users[chatID].lastAction = addTrackedProductData

	if flagExist, err := t.repo.IsTrackedProductExists(context.Background(), chatID); err != nil {
		t.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))
		menu := fmt.Sprint("*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*\n\n",
			"*–ü–æ–ø—Ä–æ–±—É–π –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ...*! ‚è≥\n\n")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã üîî", trackedModeData)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		message := tgbotapi.NewMessage(chatID, menu)

		message.ParseMode = markDown
		message.ReplyMarkup = keyboard

		t.botConf.bot.Send(message)
		return

	} else if flagExist {
		menu := fmt.Sprint("*–£–ø—Å... –ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–≤–∞—Ä!\n\n*",
			"*–ß—Ç–æ–±—ã –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Å–Ω–∏–º–∏ –µ–≥–æ*! üîî\n\n")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã üîî", trackedModeData)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		message := tgbotapi.NewMessage(chatID, menu)
		message.ParseMode = markDown
		message.ReplyMarkup = keyboard

		t.botConf.bot.Send(message)
		return
	}

	menu := []string{
		"*–¢—ã –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä üõí*\n\n",
		"‚ùì*–ö–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n",
		"- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Ö –º–∞—Ä–∫–µ—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å\n\n",
		"- –ó–∞—Ç–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏\n\n",
		"*P.S. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞*\n\n",
		"*–î–∞–≤–∞–π –ø–æ—Å—Ç–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range menu {
		buffer.WriteString(instruct)
	}

	keyboardMode := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ç—ã üõí", marketSetterMode)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, buffer.String())

	message.ParseMode = markDown
	message.ReplyMarkup = keyboardMode

	t.botConf.bot.Send(message)
}

// productSetter defines the logic of setting the tracked product's query.
func (t trackedMode) productSetter(chatID int64) {
	t.botConf.users[chatID].lastAction = productSetter

	message := tgbotapi.NewMessage(chatID,
		"*–í–≤–µ–¥–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫* üì¶")

	message.ParseMode = markDown
	t.botConf.bot.Send(message)
}

// setRequest sets the product query request for the current ChatID.
func (t trackedMode) setRequest(update *tgbotapi.Update) {
	var chatID = update.Message.Chat.ID

	request := t.botConf.users[chatID].request

	request.Query = update.Message.Text

	t.botConf.users[chatID].request = request
}

// showRequest shows the request for the tracked product to the user.
func (t trackedMode) showRequest(chatID int64) {
	const op = "tgbot.show-request"

	t.botConf.users[chatID].lastAction = showRequest

	err := t.repo.AddTrackedProduct(context.Background(), chatID, t.botConf.users[chatID].request)

	if err != nil {
		t.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))
		menu := fmt.Sprint("*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*\n\n",
			"*–ü–æ–ø—Ä–æ–±—É–π –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ...*! ‚è≥\n\n")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã üîî", trackedModeData)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		message := tgbotapi.NewMessage(chatID, menu)

		message.ParseMode = markDown
		message.ReplyMarkup = keyboard

		t.botConf.bot.Send(message)
		return
	}

	request := "‚úî*–ó–∞–ø—Ä–æ—Å –≥–æ—Ç–æ–≤! üìù*\n\n*‚úî–ú–∞—Ä–∫–µ—Ç—ã –ø–æ–∏—Å–∫–∞ üõí*\n"

	for _, market := range t.botConf.users[chatID].request.Markets {
		request += fmt.Sprintf("‚Ä¢ %s\n", market)
	}

	request += fmt.Sprintf("\n*–¢–æ–≤–∞—Ä: %s* üì¶\n", t.botConf.users[chatID].request.Query)

	request += "\n*–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:* –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–Ω—ã üéöÔ∏è\n\n"

	request += "*–ï—Å–ª–∏ —Ç—ã –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –æ—à–∏–±—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ - —Å–Ω–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–æ–±–µ—Ä–∏ –∑–∞–Ω–æ–≤–æ!* üëá"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã üîî", trackedModeData)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, request)

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	t.botConf.bot.Send(message)
}

// getTrackedProduct defines the logic of getting the tracked product for the current chatID.
func (t trackedMode) getTrackedProduct(chatID int64) {
	const op = "tgbot.get-tracked-product"

	if _, flagExist := t.botConf.users[chatID]; !flagExist {
		t.botConf.users[chatID] = newUserConfig()
	}

	t.botConf.users[chatID].lastAction = getTrackedProdMode

	product, flagExist, err := t.repo.GetTrackedProduct(context.Background(), chatID)

	if err != nil {
		t.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))
		menu := fmt.Sprint("*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*\n\n",
			"*–ü–æ–ø—Ä–æ–±—É–π –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ...*! ‚è≥\n\n")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã üîî", trackedModeData)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		message := tgbotapi.NewMessage(chatID, menu)

		message.ParseMode = markDown
		message.ReplyMarkup = keyboard

		t.botConf.bot.Send(message)

		return
	} else if !flagExist {
		menu := fmt.Sprint("*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ üîî*\n\n",
			"*–î–∞–≤–∞–π —É—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ*! üëá\n\n")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã üîî", trackedModeData)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		message := tgbotapi.NewMessage(chatID, menu)

		message.ParseMode = markDown
		message.ReplyMarkup = keyboard

		t.botConf.bot.Send(message)
		return
	}

	request := "*–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä üîî*\n"

	for _, market := range product.Markets {
		request += fmt.Sprintf("‚Ä¢ %s\n", market)
	}

	request += fmt.Sprintf("\n*–¢–æ–≤–∞—Ä: %s* üì¶\n", product.Query)
	request += "\n*–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:* –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–Ω—ã üéöÔ∏è\n\n"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã üîî", trackedModeData)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, request)

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	t.botConf.bot.Send(message)
}

// deleteTrackedProduct defines the logic of deleting the tracked mode.
func (t trackedMode) deleteTrackedProduct(chatID int64) {
	const op = "tgbot.delete-tracked-product"

	if _, flagExist := t.botConf.users[chatID]; !flagExist {
		t.botConf.users[chatID] = newUserConfig()
	}

	t.botConf.users[chatID].lastAction = deleteTrackedProductData

	err := t.repo.DeleteTrackedProduct(context.Background(), chatID)

	if err != nil {
		t.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))
		menu := fmt.Sprint("*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*\n\n",
			"*–ü–æ–ø—Ä–æ–±—É–π –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ...*! ‚è≥\n\n")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã üîî", trackedModeData)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		message := tgbotapi.NewMessage(chatID, menu)

		message.ParseMode = markDown
		message.ReplyMarkup = keyboard

		t.botConf.bot.Send(message)
		return
	}

	menu := "*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ —É—Å–ø–µ—à–Ω–æ! üîî*\n\n"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã üîî", trackedModeData)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, menu)

	message.ParseMode = markDown
	message.ReplyMarkup = keyboard

	t.botConf.bot.Send(message)
}

// sendRequests defines the logic of sending the async requests.
func (t trackedMode) sendAsyncRequests() {
	const op = "tgbot.send-async-requests"

	time.Sleep(time.Second * 90)

	for {
		timeStart := time.Now()
		res, err := t.repo.GetUsersTrackedProducts(context.Background())

		if err != nil {
			t.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))
			time.Sleep(time.Hour * 24)
			continue
		}

		for chatID, request := range res {
			err = t.api.SendAsyncBestPriceRequest(request, map[string]string{
				"ChatID": fmt.Sprint(chatID),
			})

			if err != nil {
				t.logger.Warn(fmt.Sprintf("error of the %s: %s", op, err))
			}

			time.Sleep(time.Minute * 1)
		}

		for time.Since(timeStart) < time.Hour*24 {
			continue
		}
	}
}
