package tgbot

import (
	"bytes"
	"context"
	"fmt"
	"log/slog"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/services"
	"github.com/MaKcm14/price-service/pkg/entities"
)

// favoriteMode defines the logic of the favorite mode processing.
type favoriteMode struct {
	botConf *tgBotConfigs
	logger  *slog.Logger

	repo services.Repository
}

func newFavoriteMode(log *slog.Logger, bot *tgBotConfigs, repo services.Repository) favoriteMode {
	return favoriteMode{
		botConf: bot,
		logger:  log,
		repo:    repo,
	}
}

// addFavoriteProduct adds the product to the favorites.
func (f *favoriteMode) addFavoriteProduct(chatID int64) {
	const op = "tgbot.add-favorite-product"

	response := "*–¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚≠ê*"

	market := f.botConf.users[chatID].sample.lastMarketChoice
	count := f.botConf.users[chatID].sample.samplePtr[market] - 1
	sample := f.botConf.users[chatID].sample.sample[market]

	if count < 0 {
		return
	}

	product := sample.Products[count]

	err := f.repo.AddFavoriteProducts(context.Background(), chatID, []entities.Product{product})

	if err != nil {
		f.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))
		response = "*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*"
	}

	message := tgbotapi.NewMessage(chatID, response)

	message.ParseMode = markDown

	f.botConf.bot.Send(message)
}

// favoriteMode defines the entry-point to the favorite mode.
func (f *favoriteMode) favoriteMode(chatID int64) {
	if _, flagExist := f.botConf.users[chatID]; !flagExist {
		f.botConf.users[chatID] = newUserConfig()
	}

	f.botConf.users[chatID].lastAction = favoriteModeData

	favoriteModeInstruct := []string{
		"*–¢—ã –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ò–∑–±—Ä–∞–Ω–Ω–æ–µ* ‚≠ê\n\n",
		"- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∫–æ–≥–¥–∞-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å ‚ù§Ô∏è\n\n",
		"‚ùì*–ö–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n\n",
		"- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É *–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä ‚û°Ô∏è*, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É\n\n",
		"- –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –≤—ã–±–æ—Ä–∫–∏, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä* üóëÔ∏è\n\n",
		"- –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏ *–ú–µ–Ω—é* üìã\n\n",
		"*–ö —Ç–æ–≤–∞—Ä–∞–º!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range favoriteModeInstruct {
		buffer.WriteString(instruct)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶", showFavoriteProducts)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, buffer.String())

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	f.botConf.bot.Send(message)
}

// showProduct shows the favorite products.
func (f *favoriteMode) showProduct(chatID int64, products map[int]entities.Product) {
	var product entities.Product

	for key, val := range products {
		if _, flagExist := f.botConf.users[chatID].favorites.favoriteLastProdsID[key]; !flagExist {
			product = val
			f.botConf.users[chatID].favorites.lastFavoriteProdID = key
			f.botConf.users[chatID].favorites.favoriteLastProdsID[key] = struct{}{}
			break
		}
	}

	productDesc := []string{
		fmt.Sprintf("*‚úîÔ∏è %s* üì¶\n\n", product.Name),
		fmt.Sprintf("*‚öôÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:*  %s\n\n", product.Brand),
		fmt.Sprintf("*üè∑Ô∏è –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏:*  %d\n\n", product.Price.BasePrice),
		fmt.Sprintf("*üîó –ü–æ—Å—Ç–∞–≤—â–∏–∫:* %s\n\n", product.Supplier),
		fmt.Sprintf("*üì¶ –¢–æ–≤–∞—Ä:*\n%s\n\n", product.Links.URL),
	}

	buffer := bytes.Buffer{}

	for _, desc := range productDesc {
		buffer.WriteString(desc)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä ‚û°Ô∏è", showFavoriteProducts)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üóëÔ∏è", deleteFavoriteProduct)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, buffer.String())

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	f.botConf.bot.Send(message)
}

// showProductModeGettingErrHandler defines the logic of processing
// the error of getting the favorite products.
func (f *favoriteMode) showProductModeGettingErrHandler(chatID int64, err error) {
	const op = "tgbot.show-favorite-products"

	f.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))

	response := "*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, response)

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	f.botConf.bot.Send(message)
}

// showProductModeNoProdsHandler defines the logic of processing the
// empty favorites products array getting.
func (f *favoriteMode) showProductModeNoProdsHandler(chatID int64) {
	response := "*–¢–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç üì¶*"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, response)

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	f.botConf.bot.Send(message)
}

// showFavoriteProducts defines the logic of handling the favorite products request.
func (f *favoriteMode) showFavoriteProducts(chatID int64) {
	f.botConf.users[chatID].lastAction = showFavoriteProducts

	products, err := f.repo.GetFavoriteProducts(context.Background(), chatID)

	if err != nil {
		f.showProductModeGettingErrHandler(chatID, err)
		return

	} else if len(f.botConf.users[chatID].favorites.favoriteLastProdsID) == len(products) {
		f.showProductModeNoProdsHandler(chatID)
		return
	}

	f.showProduct(chatID, products)
}

// deleteFavoriteProduct defines the logic of the deleting the user's favorite product.
func (f *favoriteMode) deleteFavoriteProduct(chatID int64) {
	const op = "tgbot.delete-favorite-product"

	f.botConf.users[chatID].lastAction = deleteFavoriteProduct

	response := "*–¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω üóëÔ∏è*"

	err := f.repo.DeleteFavoriteProducts(context.Background(), chatID, []int{f.botConf.users[chatID].favorites.lastFavoriteProdID})

	if err != nil {
		f.logger.Error(fmt.Sprintf("error of the %s: %s", op, err))
		response = "*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*"
	} else {
		delete(f.botConf.users[chatID].favorites.favoriteLastProdsID,
			f.botConf.users[chatID].favorites.lastFavoriteProdID)
	}

	message := tgbotapi.NewMessage(chatID, response)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä ‚û°Ô∏è", showFavoriteProducts)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	f.botConf.bot.Send(message)
}
