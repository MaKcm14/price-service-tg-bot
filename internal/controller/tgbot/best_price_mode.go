package tgbot

import (
	"bytes"
	"errors"
	"fmt"
	"log/slog"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/entities/dto"
	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/repository/api"
	"github.com/MaKcm14/best-price-service/price-service-tg-bot/internal/services"
)

// bestPriceMode defines the logic of best price mode processing.
type bestPriceMode struct {
	botConf *tgBotConfigs
	logger  *slog.Logger
	api     services.ApiInteractor
}

func newBestPriceMode(log *slog.Logger, bot *tgBotConfigs, api services.ApiInteractor) bestPriceMode {
	return bestPriceMode{
		botConf: bot,
		logger:  log,
		api:     api,
	}
}

// mode is the action on the pressing the best-price button.
func (b bestPriceMode) mode(chatID int64) {
	if _, flagExist := b.botConf.users[chatID]; !flagExist {
		b.botConf.users[chatID] = newUserConfig()
	}

	b.botConf.users[chatID].lastAction = bestPriceModeData
	b.botConf.users[chatID].request = dto.NewProductRequest()

	instructs := []string{
		"*–¢—ã –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ Best Price üìä *\n\n",
		"‚ùì*–ö–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n",
		"- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Ö –º–∞—Ä–∫–µ—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å\n\n",
		"- –ó–∞—Ç–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏\n\n",
		"*P.S. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞*\n\n",
		"*–î–∞–≤–∞–π –ø–æ–∏—â–µ–º!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range instructs {
		buffer.WriteString(instruct)
	}

	keyboardMode := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ç—ã üõí", marketSetterMode)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, buffer.String())

	message.ParseMode = markDown
	message.ReplyMarkup = keyboardMode

	b.botConf.bot.Send(message)
}

// productSetter defines the logic of setting the product's name.
func (b bestPriceMode) productSetter(chatID int64) {
	if len(b.botConf.users[chatID].request.Markets) == 0 {
		message := tgbotapi.NewMessage(chatID, fmt.Sprint("*–£–ø—Å... –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –∑–∞–¥–∞–ª –Ω–∏ –æ–¥–∏–Ω –º–∞—Ä–∫–µ—Ç –ø–æ–∏—Å–∫–∞ üõí*\n\n",
			"*–ó–∞–¥–∞–π —Å–Ω–∞—á–∞–ª–∞ –∏—Ö, –∞ –∑–∞—Ç–µ–º —Ç–æ–≤–∞—Ä üì¶*",
		))

		message.ParseMode = markDown

		message.ReplyMarkup = b.botConf.getKeyBoardWithMarkets(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–¥–∞—Ç—å —Ç–æ–≤–∞—Ä üì¶", productSetter)),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
		)

		b.botConf.bot.Send(message)
		return
	}

	b.botConf.users[chatID].lastAction = productSetter

	message := tgbotapi.NewMessage(chatID,
		"*–í–≤–µ–¥–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫* üì¶")

	message.ParseMode = markDown
	b.botConf.bot.Send(message)
}

// modeErrHandler the logic of searching's error processing.
func (b bestPriceMode) modeErrHandler(chatID int64, response string) {
	message := tgbotapi.NewMessage(chatID, response)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	b.botConf.bot.Send(message)
}

// searchModeReply defines the logic of searching's reply.
func (b bestPriceMode) searchModeReply(chatID int64) {
	iterInstrs := []string{
		"*–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!* üòä\n\n",
		"‚ùì*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫?*\n",
		"‚úî –ù–∞–∂–∏–º–∞–π –Ω–∞ —Ç–æ—Ç –º–∞—Ä–∫–µ—Ç, —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n",
		"‚úî –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–î–æ–±–∞–≤–∏—Ç—å*\n\n",
		"*–î–∞–≤–∞–π —Å–º–æ—Ç—Ä–µ—Ç—å!* üëá",
	}

	buffer := bytes.Buffer{}

	for _, instruct := range iterInstrs {
		buffer.WriteString(instruct)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶", productsIter)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, buffer.String())

	message.ParseMode = markDown
	message.ReplyMarkup = keyboard

	b.botConf.bot.Send(message)
}

// startSearch defines the logic of searching the products using the finished request.
func (b bestPriceMode) startSearch(chatID int64) {
	const op = "tgbot.best-price-search"

	b.botConf.users[chatID].lastAction = startSearch
	products, err := b.api.GetProductsByBestPrice(b.botConf.users[chatID].request)

	if err != nil {
		b.logger.Warn(fmt.Sprintf("error of the %s: %s", op, err))
		response := "*–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòû*"

		if errors.Is(err, api.ErrApiInteraction) {
			response += "\n\n*–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø–∞—Ä—Å–µ—Ä–æ–º... \n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫–ª—é—á–∏—Ç—å VPN –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ ‚è≥*"
		}

		b.modeErrHandler(chatID, response)

		return
	}

	b.botConf.users[chatID].sample.sample = products
	markets := make(map[string]int)

	for _, market := range b.botConf.users[chatID].request.Markets {
		markets[market] = 0
	}

	b.botConf.users[chatID].sample.samplePtr = markets
	b.searchModeReply(chatID)
}

// showRequest shows the finished request that will use to get the products.
func (p bestPriceMode) showRequest(chatID int64) {
	p.botConf.users[chatID].lastAction = showRequest

	request := "‚úî*–ó–∞–ø—Ä–æ—Å –≥–æ—Ç–æ–≤! üìù*\n\n*‚úî–ú–∞—Ä–∫–µ—Ç—ã –ø–æ–∏—Å–∫–∞ üõí*\n"

	for _, market := range p.botConf.users[chatID].request.Markets {
		request += fmt.Sprintf("‚Ä¢ %s\n", market)
	}

	request += fmt.Sprintf("\n*–¢–æ–≤–∞—Ä: %s* üì¶\n", p.botConf.users[chatID].request.Query)
	request += "\n*–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:* –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–Ω—ã üéöÔ∏è\n\n"
	request += "*–ï—Å–ª–∏ —Ç—ã –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –æ—à–∏–±—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ - —Å–æ–±–µ—Ä–∏ –∑–∞–Ω–æ–≤–æ!* üëá"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ üîé", startSearch)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–°–æ–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ", bestPriceModeData)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω—é üìã", menuAction)),
	)

	message := tgbotapi.NewMessage(chatID, request)

	message.ReplyMarkup = keyboard
	message.ParseMode = markDown

	p.botConf.bot.Send(message)
}

// setRequest sets the product query request for the current ChatID.
func (p bestPriceMode) setRequest(update *tgbotapi.Update) {
	var chatID = update.Message.Chat.ID

	request := p.botConf.users[chatID].request

	request.Query = update.Message.Text
	p.botConf.users[chatID].request = request
}
